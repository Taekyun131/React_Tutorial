{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## 1. 자바스크립트의 동등비교"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 1) 자바스크립트의 데이터 타입"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### 원시타입"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// undefined - 선언되었지만 할당되지 않은 값\r\nlet foo;\r\nconsole.log(typeof foo == \"undefined\"); //true\r\n\r\nfunction bar(hello) {\r\n  return hello;\r\n}\r\n\r\nconsole.log(typeof bar() == \"undefined\"); //true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// null - 아직 값이 없거나 비어 있는 값\r\nconsole.log(typeof null === \"object\"); //true?\r\n\r\n//boolean - 참(true)과 거짓(false)만을 가질 수 있는 타입\r\n//falsy: 조건문에서 false로 취급하는 값 ex) false(boolean), 0(Number), NaN(Number), \"\"(String), null(null), undefined(undefined)\r\n//truethy: 조건문에서 true로 취급하는 값\r\nif (1) {\r\n  //true\r\n}\r\n\r\nif (0) {\r\n  //false\r\n}\r\nif (NaN) {\r\n  //false\r\n}\r\n\r\nconsole.log(Boolean(1)); //true\r\nconsole.log(Boolean(0)); //false\r\nconsole.log(Boolean(true)); //true"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "//Number - 정수와 실수를 저장할 수 있는 타입, -(2^53-1) ~ 2^53-1 사이의 값을 저장\r\nconst a = 1;\r\nconst maxInteger = Math.pow(2, 53);\r\nconsole.log(maxInteger - 1 === Number.MAX_SAFE_INTEGER); //true\r\nconst minInteger = -(Math.pow(2, 53) - 1);\r\nconsole.log(minInteger === Number.MIN_SAFE_INTEGER); //true\r\n\r\n//각 진수별로 값을 표현해도 10진수로 해석\r\nconst 이진수_2 = 0b10; //2진수 2\r\nconsole.log(이진수_2 == 2); //true\r\nconst 팔진수_8 = 0o10; //8진수 8\r\nconsole.log(팔진수_8 == 8); //true\r\nconst 십육진수_16 = 0x10; //16진수 16\r\nconsole.log(십육진수_16 == 16); //true"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "//bigInt - number가 다룰 수 있는 숫자보다 큰 수 저장 가능\r\nconsole.log(9007199254740992 === 9007199254740993); //더 이상 다룰 수 없는 수이므로 true가 나온다\r\nconst maxInteger1 = Number.MAX_SAFE_INTEGER;\r\nconsole.log(maxInteger1 + 5 === maxInteger1 + 6); //true??\r\nconst bigInt1 = 9007099254740995n; //끝에 n을 붙이거나\r\nconst bigInt2 = BigInt(\"9007199254740995\"); //BigInt 함수를 사용\r\n\r\nconst number = 9007199254740992;\r\nconst bigint = 9007199254740992n;\r\nconsole.log(typeof number); //number\r\nconsole.log(typeof bigint); //bigint\r\n\r\nconsole.log(number == bigint); //ture\r\nconsole.log(number === bigint); //false(타입이 다르다)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "//String - 텍스트 타입의 데이터를 저장\r\n\r\nconst longText1 = `\r\n안녕하세요.\r\n`;\r\nconsole.log(longText1); // '\\n안녕하세요.\\n'\r\n\r\n// const longText2=\"\r\n// 안녕하세요.\r\n// \";\r\n//Uncaught SyntaxError: Invalid or unexpected token\r\n\r\nconst foo1 = \"bar\";\r\nconsole.log(foo1[0]); //'b'\r\n\r\nfoo1[0] = \"a\";\r\nconsole.log(foo1); // bar(윗줄 적용x)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "//symbol - 중복되지 않는 고유한 값을 나타나개 위한 타입, 생성시 반드시 Symbol()함수를 사용해야한다.\r\n\r\n//Symbol함수에 같은 인수를 넘겨주더라도 동일한 값으로 인정되지 않는다.\r\n//Symbol함수 내부에 넘겨주는 값은 Symbol 생성에 영향을 미치지 않는다.(Symbol.for 제외)\r\nconst key = Symbol(\"key\");\r\nconst key2 = Symbol(\"key\");\r\nconsole.log(key === key2); //false\r\n\r\n//동일한 값을 사용하기 위해서는 Symbol.for를 활용\r\nconsole.log(Symbol.for(\"hello\") === Symbol.for(\"hello\")); //true"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#### 객체타입"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "//객체 - 원시타입 이외의 모든 것, 참조를 전달해 참조타입으로도 불린다, 키-값 쌍으로 이루어진 데이터를 저장\r\nconsole.log(typeof [] === \"object\"); //true\r\nconsole.log(typeof {} === \"object\"); //true\r\n\r\nfunction hello() {}\r\nconsole.log(typeof hello === \"function\"); //true\r\n\r\nconst hello1 = function () {};\r\nconst hello2 = function () {};\r\nconsole.log(hello1 === hello2); //false, 객체인 함수의 내용이 육안으로는 같아보여도 참조가 다르기 때문에 false"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### 2) 값을 저장하는 방식의 차이"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let hello='hello world';\r\nlet hi=hello;\r\nconsole.log(hello===hi);    //true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "let hello='hello world';\r\nlet hi='hello world';\r\nconsole.log(hello===hi);    //true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "//다음 객체는 완벽하게 동일한 내용을 가지고 있다\r\nvar hello={\r\n    greet: 'hello world',\r\n}\r\n\r\nvar hi={\r\n    greet: 'hello world',\r\n}\r\n\r\n//그러나 동등비교를 하면 false\r\nconsole.log(hello===hi);    //false\r\n\r\n//원시값인 내부 속성값을 비교하면 동일\r\nconsole.log(hello.greet===hi.greet);    //true\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "false",
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 3) Object.is"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// == vs Object.is\r\n// '=='는 같음을 비교하기 전 같은 타입이 아니라면 강제로 형변환\r\n// Object.is 는 형변환x\r\n\r\n//Object.is()는 두 값을 비교할 때 ===와 비슷하게 동작하지만, NaN과 0(양의 0, 음의 0) 비교에서 차이 발생\r\n//===와의 차이점은 주로 특수한 값들(NaN, 0, -0)에 대한 비교에서 발생생\r\nconsole.log(-0===+0)    //true\r\nconsole.log(Object.is(-0, +0)) //false\r\n\r\nconsole.log(Number.NaN===NaN)   //false\r\nconsole.log(Object.is(Number.NaN, NaN));   //true\r\n\r\nconsole.log(NaN===0/0)  //false\r\nconsole.log(Object.is(NaN,0/0)) //true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "true",
                                "false",
                                "false",
                                "true",
                                "false",
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Object.is 객체 비교\r\nconsole.log(Object.is({},{}))   //false\r\n\r\nconst a={\r\n    hello: 'hi',\r\n}\r\n\r\nconst b=a\r\n\r\nconsole.log(Object.is(a,b)) //true\r\nconsole.log(a===b)  //true"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "false",
                                "true",
                                "true",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### 4) 리액트에서의 동등비교"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Object.is로 먼저 비교를 수행한 후, 객체 간 얕은 비교를 한 번 더 수행\r\n\r\n//Object.is는 참조가 다른 객체에 대해 비교가 불가능\r\nconsole.log(Object.is({hello:'world'},{hello:'world'})) //false\r\n\r\n// shallowEqual은 객체의 1 depth까지는 비교가능\r\nconsole.log(shallowEqual({hello:'world'},{hello:'world'})) //true\r\n\r\n// 2 depth까지 가면 false를 반환\r\nconsole.log(shallowEqual({hello:{hi:'world'}}, {hello:{hi:'world'}})) //false\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "false",
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "ReferenceError",
                                "message": "shallowEqual is not defined",
                                "stack": "    at <Cell 20> [7, 0]\n    at <Cell 20> [6, 46]\n    at Script.runInContext (node:vm:148:12)\n    at Script.runInNewContext (node:vm:153:17)\n    at Object.runInNewContext (node:vm:309:38)\n    at C (c:\\Users\\신태균\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:113345)\n    at t.execCode (c:\\Users\\신태균\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:114312)\n    at k.<anonymous> (c:\\Users\\신태균\\.vscode\\extensions\\donjayamanne.typescript-notebook-2.0.6\\out\\extension\\server\\index.js:2:142156)\n    at k.emit (node:events:519:28)\n    at k.emit (node:domain:488:12)"
                            }
                        }
                    ]
                }
            ]
        }
    ]
}